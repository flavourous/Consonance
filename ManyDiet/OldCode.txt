

void Handleremovedietinstance (DietInstanceVM obj)
{
	var mdt = diRefIndexV [obj];
	var mod = diRefIndexD [mdt.id];
	if (CurrentDietInstance.id == mdt.id)
		CurrentDietInstance = null;
	mod.RemoveDiet(mdt);
	if (CurrentDietInstance == null)
		ChangeCurrentDiet (GetDefaultedDietInstance());
}

void Handleselectdietinstance (DietInstanceVM obj)
{
	ChangeCurrentDiet (diRefIndexV [obj]);
}

void Handleadddietinstance ()
{
	List<String> s = new List<string> ();
	foreach (var d in diets)
		s.Add (d.Key.model.name);
	view.SelectString ("Select Diet Type", s, diet_idx => {
		var diet = diets [diet_idx];
		view.GetValues ("Diet Name", diet.Key.model.DietCreationFields (), vals => {
			var di = diet.Key.StartNewDiet (DateTime.Now, vals.values);
			if (CurrentDietInstance == null)
				ChangeCurrentDiet (di);
		}, AddedItemVMDefaults.None);
	});
}
DateTime ds,de;
void ChangeDay(DateTime to)
{
	ds = new DateTime (to.Year, to.Month, to.Day, 0, 0, 0);
	de = ds.AddDays (1);
	view.day = ds;
	PushEatLines ();
	PushBurnLines ();
}
void ChangeCurrentDiet(DietInstance to)
{
	CurrentDietInstance = to;
	view.currentDiet = to == null ? null : diRefIndexM [to.id];
	PushEatLines ();
	PushBurnLines ();
}
DietInstance GetDefaultedDietInstance()
{
	var cdis = conn.Table<DietInstance> ().Where (d => d.started <= DateTime.Now && (d.ended == null || d.ended > DateTime.Now));
	if(cdis.Count() == 0) return null;
	return	cdis.First ();
}
void RemEatItem(EntryLineVM line)
{
	var dd = GetCurrentDietDomain ();
	dd.broker.foodhandler.Remove (eatRefIndex [line]);
}
void RemBurnItem(EntryLineVM line)
{
	var dd = GetCurrentDietDomain ();
	dd.broker.firehandler.Remove (burnRefIndex [line]);
}

void AddEatItem ()
{
	var dd = GetCurrentDietDomain ();
	var fis = new List<FoodInfo> (conn.Table<FoodInfo> ().Where (f => dd.broker.model.foodcreator.IsInfoComplete (f)));
	view.SelectInfo ("Select Food", new SelectVMListDecorator<FoodInfo> (fis, dd.presenter.GetRepresentation), foodidx => {
		var food = fis [foodidx];
		view.GetValues ("Eat Entry", dd.broker.model.foodcreator.CalculationFields (food), mod => {
			dd.broker.foodhandler.Add (dd.instance, mod.values, vm => {
				vm.entryWhen = mod.when;
				vm.entryName = mod.name;
			});
		});
	});
}
void AddEatItemQuick()
{
	var dd = GetCurrentDietDomain ();
	view.GetValues ("Quick Eat Entry", dd.broker.model.foodcreator.CreationFields (), mod => {
		dd.broker.foodhandler.Add (dd.instance, mod.values, vm => {
			vm.entryWhen = mod.when;
			vm.entryName = mod.name;
		});
	});
}
void AddBurnItem ()
{
	var dd = GetCurrentDietDomain ();
	var fis = new List<FireInfo> (conn.Table<FireInfo> ().Where (f => dd.broker.model.firecreator.IsInfoComplete (f)));
	view.SelectInfo ("Select Burn", new SelectVMListDecorator<FireInfo> (fis, dd.presenter.GetRepresentation), idx => {
		var fire = fis [idx];
		view.GetValues ("Burn Entry", dd.broker.model.firecreator.CalculationFields (fire), mod => {
			dd.broker.firehandler.Add (dd.instance, fire, mod.values, vm => {
				vm.entryWhen = mod.when;
				vm.entryName = mod.name;
			});
		});
	});
}
void AddBurnItemQuick()
{
	var dd = GetCurrentDietDomain ();
	view.GetValues ("Quick Burn Entry", dd.broker.model.firecreator.CreationFields (), mod => {
		dd.broker.firehandler.Add (dd.instance, mod.values, vm => {
			vm.entryWhen = mod.when;
			vm.entryName = mod.name;
		});
	});
}

void HandleTableChanged (object sender, NotifyTableChangedEventArgs e)
{
	if (typeof(BaseEatEntry).IsAssignableFrom (e.Table.MappedType))
		PushEatLines ();
	if (typeof(BaseBurnEntry).IsAssignableFrom (e.Table.MappedType))
		PushBurnLines ();
	if (typeof(DietInstance).IsAssignableFrom (e.Table.MappedType))
		PushDietInstances ();
}

IEnumerable<BaseEatEntry> ecache = null;
IEnumerable<BaseEatEntry> EatEnts(CDIThings dd) { return (IEnumerable<BaseEatEntry>)dd.broker.foodhandler.Get (dd.instance, ds, de); }
void PushEatLines()
{
	if (CurrentDietInstance == null) {
		view.SetEatLines (new EntryLineVM[0], new TrackingInfo[0]);
		return;
	}
	var dd = GetCurrentDietDomain ();
	var ents = ecache = EatEnts (dd);
	var lines = GetLines (ents, dd.presenter);
	var tracks = dd.broker.model.DetermineEatTrackingForRange (ents, bcache ?? BurnEnts(dd), ds,de);
	view.SetEatLines (lines, tracks);
}
IEnumerable<BaseBurnEntry> bcache = null;
IEnumerable<BaseBurnEntry> BurnEnts(CDIThings dd) { return (IEnumerable<BaseBurnEntry>)dd.broker.firehandler.Get (dd.instance, ds, de); }
void PushBurnLines()
{
	if (CurrentDietInstance == null) {
		view.SetBurnLines (new EntryLineVM[0], new TrackingInfo[0]);
		return;
	}
	var dd = GetCurrentDietDomain ();
	var ents = bcache = BurnEnts (dd);
	var lines = GetLines (ents, dd.presenter);
	var tracks = dd.broker.model.DetermineBurnTrackingForRange (ecache ?? EatEnts(dd), ents, ds,de);
	view.SetBurnLines (lines, tracks);
}
void PushDietInstances()
{
	diRefIndexV.Clear ();
	diRefIndexM.Clear ();
	diRefIndexD.Clear ();
	List<DietInstanceVM> built = new List<DietInstanceVM> ();
	foreach (var dp in diets)
		built.AddRange (GetIVMs (dp));
	view.SetInstances (built);
	if (CurrentDietInstance != null)
		view.currentDiet = diRefIndexM [CurrentDietInstance.id];
}
Dictionary<DietInstanceVM,DietInstance> diRefIndexV = new Dictionary<DietInstanceVM, DietInstance> ();
Dictionary<int,DietInstanceVM> diRefIndexM = new Dictionary<int, DietInstanceVM> ();
Dictionary<int, IDiet> diRefIndexD = new Dictionary<int, IDiet>();
IEnumerable<DietInstanceVM> GetIVMs(KeyValuePair<IDiet,IDietPresenter> dp)
{
	var insts = dp.Key.GetDiets ();
	foreach (var i in insts) {
		var vm = dp.Value.GetRepresentation (i);
		diRefIndexV [vm] = i;
		diRefIndexM [i.id] = vm;
		diRefIndexD[i.id] = dp.Key;
		yield return vm;
	}
}
Dictionary<EntryLineVM, BaseEatEntry> eatRefIndex = new Dictionary<EntryLineVM, BaseEatEntry>();
IEnumerable<EntryLineVM> GetLines(IEnumerable<BaseEatEntry> ents, IDietPresenter dp)
{
	eatRefIndex.Clear ();
	foreach (var e in ents) {
		var vm = dp.GetRepresentation (e);
		eatRefIndex[vm] = e;
		yield return vm;
	}
}
Dictionary<EntryLineVM,BaseBurnEntry> burnRefIndex = new Dictionary<EntryLineVM, BaseBurnEntry>();
IEnumerable<EntryLineVM> GetLines(IEnumerable<BaseBurnEntry> ents, IDietPresenter dp)
{
	burnRefIndex.Clear ();
	foreach (var e in ents) {
		var vm = dp.GetRepresentation (e);
		burnRefIndex[vm] = e;
		yield return vm;
	}
}